[{"/mnt/c/Users/min48/React Projects/idk-react/src/CodeTyper.js":"1","/mnt/c/Users/min48/React Projects/idk-react/src/TextTyper.js":"2","/mnt/c/Users/min48/React Projects/idk-react/src/index.js":"3"},{"size":8437,"mtime":1610418456620,"results":"4","hashOfConfig":"5"},{"size":9898,"mtime":1609217943649,"results":"6","hashOfConfig":"5"},{"size":286,"mtime":1609369758695,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"13eynp2",{"filePath":"10","messages":"11","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/mnt/c/Users/min48/React Projects/idk-react/src/CodeTyper.js",["16","17","18","19","20","21","22","23","24","25","26","27","28","29","30"],"/mnt/c/Users/min48/React Projects/idk-react/src/TextTyper.js",["31","32","33","34","35","36","37"],"import React, {Component} from 'react'\n\nclass TextTyper extends Component {\n    state = {\n        randomWords: [\"the\", \"be\", \"of\", \"and\", \"a\", \"to\", \"in\", \"he\", \"have\", \"it\", \"that\", \"for\", \"they\", \"I\", \"with\", \"as\", \"not\", \"on\", \"she\", \"at\", \"by\", \"this\", \"we\", \"you\", \"do\", \"but\", \"from\", \"or\", \"which\", \"one\", \"would\", \"all\", \"will\", \"there\", \"say\", \"who\", \"make\", \"when\", \"can\", \"more\", \"if\", \"no\", \"man\", \"out\", \"other\", \"so\", \"what\", \"time\", \"up\", \"go\", \"about\", \"than\", \"into\", \"could\", \"state\", \"only\", \"new\", \"year\", \"some\", \"take\", \"come\", \"these\", \"know\", \"see\", \"use\", \"get\", \"like\", \"then\", \"first\", \"any\", \"work\", \"now\", \"may\", \"such\", \"give\", \"over\", \"think\", \"most\", \"even\", \"find\", \"day\", \"also\", \"after\", \"way\", \"many\", \"must\", \"look\", \"before\", \"great\", \"back\", \"through\", \"long\", \"where\", \"much\", \"should\", \"well\", \"people\", \"down\", \"own\", \"just\", \"because\", \"good\", \"each\", \"those\", \"feel\", \"seem\", \"how\", \"high\", \"too\", \"place\", \"little\", \"world\", \"very\", \"still\", \"nation\", \"hand\", \"old\", \"life\", \"tell\", \"write\", \"become\", \"here\", \"show\", \"house\", \"both\", \"between\", \"need\", \"mean\", \"call\", \"develop\", \"under\", \"last\", \"right\", \"move\", \"thing\", \"general\", \"school\", \"never\", \"same\", \"another\", \"begin\", \"while\", \"number\", \"part\", \"turn\", \"real\", \"leave\", \"might\", \"want\", \"point\", \"form\", \"off\", \"child\", \"few\", \"small\", \"since\", \"against\", \"ask\", \"late\", \"home\", \"interest\", \"large\", \"person\", \"end\", \"open\", \"public\", \"follow\", \"during\", \"present\", \"without\", \"again\", \"hold\", \"govern\", \"around\", \"possible\", \"head\", \"consider\", \"word\", \"program\", \"problem\", \"however\", \"lead\", \"system\", \"set\", \"order\", \"eye\", \"plan\", \"run\", \"keep\", \"face\", \"fact\", \"group\", \"play\", \"stand\", \"increase\", \"early\", \"course\", \"change\", \"help\", \"line\"],\n        wordCount: 25,\n        wordList: [\"\"],\n        input: '',\n        currentWord: 0,\n        correctKeys: 0,\n        barClass: \"\",\n        textDisplay: <span> {'{Insert random words here}'} </span>,\n        textDisplayClasses: [],\n        results: \"WPM: XX / ACC: XX\",\n        startDate: 0\n    }\n\n    setText = () => {\n        // Reset values\n        this.state.wordList = []\n        this.state.currentWord = 0\n        this.state.correctKeys = 0\n        this.textDisplayClasses = []\n        \n        // Fill wordList with random words\n        for(var i = 0; i < this.state.wordCount; i++)\n        {\n            var randomWord = this.state.randomWords[Math.floor(Math.random() * this.state.randomWords.length)]\n            //this.state.wordList = [...this.state.wordList, randomWord]\n            this.state.wordList.push(randomWord)\n        }\n\n        // Display words on displaybox and store classNames into an array\n        const newTextDisplay = this.state.wordList.map((word, index) => {\n            this.state.textDisplayClasses.push('')\n\n            return (\n                //<span key={index} className=''>{word} </span>\n                <span key={index} className={this.state.textDisplayClasses[index]}>{word} </span>\n            )\n        })\n\n        // Highlight first word\n        //newTextDisplay[this.state.currentWord] = <span key={this.state.currentWord} className='highlight'>{this.state.wordList[this.state.currentWord]} </span>\n        \n        this.setState({\n            textDisplay: newTextDisplay,\n            input: '',\n            barClass: '',\n        })\n\n        this.setHighlights('highlight')\n    }\n\n    handleChange = (event) => {\n        // Timer starts once first character is typed.\n        if(this.state.currentWord === 0 && this.state.input === '')\n        {\n            this.state.startDate = Date.now()\n            console.log(\"First letter typed. Starting timer.\")\n        }\n\n        this.setState({input: event.target.value})\n\n        // Check if the typed letters match the current word so far\n        if(this.state.currentWord < this.state.wordList.length-1)\n        {\n            const currentWordSlice = this.state.wordList[this.state.currentWord].slice(0,event.target.value.length);\n            this.setState({\n                barClass: event.target.value === currentWordSlice ? '' : 'wrong'\n            })\n        }\n\n        // Typed word is submitted once spacebar (' ') is pressed\n        const lastLetter = event.target.value.slice(-1)\n        if(lastLetter === ' ')\n        {\n            // If field was already empty or last word was already typed out, ignore.\n            if(this.state.input === '' || this.state.currentWord >= this.state.wordList.length)\n            {\n                this.setState({\n                    input: '',\n                    barClass: ''\n                })\n            }\n            else\n            {\n                // A word was fully typed out, determine if it matches current word.\n                if(this.state.input === this.state.wordList[this.state.currentWord]) // Correct\n                {\n                    this.state.correctKeys += this.state.wordList[this.state.currentWord].length + 1\n                    this.setHighlights('highlight correct')\n                }\n                else // Wrong\n                {\n                    this.setHighlights('highlight wrong')\n                }\n                \n                // Check if last typed word was the last. If not, move to next word.\n                if(this.state.currentWord === this.state.wordList.length - 1) // last word typed\n                {\n                    this.showResults()\n                }\n                else // not last word yet, move to next word and highlight it\n                {\n                    this.state.currentWord++\n                    this.setHighlights('highlight')\n                }\n                \n                // Clear input field for next word.\n                this.setState({\n                    input: '',\n                    barClass: ''\n                })\n            }\n        }\n    }\n\n    setHighlights = (name) => {\n        /*\n        const newTextDisplay = this.state.textDisplay\n        \n        // Set className of typed out word to set correct or wrong highlight colors\n        newTextDisplay[this.state.currentWord] = <span key={this.state.currentWord} className={name}>{this.state.wordList[this.state.currentWord]} </span>\n    \n        this.setState({\n            textDisplay: newTextDisplay\n        })\n        */\n\n       const newTextDisplayClasses = this.state.textDisplayClasses\n        \n       // Set className of typed out word to set correct or wrong highlight colors\n       newTextDisplayClasses[this.state.currentWord] = name\n\n       const newTextDisplay = this.state.wordList.map((word, index) => {\n            return (\n                <span key={index} className={this.state.textDisplayClasses[index]}>{word} </span>\n            )\n        })\n   \n       this.setState({\n           textDisplayClasses: newTextDisplayClasses,\n           textDisplay: newTextDisplay\n       })\n    }\n\n    setWordCount = (count) => {\n        this.state.wordCount = count\n        //console.log(\"New word count: \" + count)\n        this.setText()\n    }\n\n    showResults = () => {\n        console.log(\"All words typed out. Showing results.\")\n        let words, minute, acc\n\n        words = this.state.correctKeys / 5\n        minute = (Date.now() - this.state.startDate) / 1000 / 60\n        let totalKeys = -1\n        this.state.wordList.forEach(word => {\n            totalKeys += word.length + 1\n        });\n        acc = Math.floor((this.state.correctKeys / totalKeys) * 100)\n\n        let wpm = Math.floor(words / minute)\n\n        this.setState({ results: \"WPM: \" + wpm + \" / ACC: \" + acc})\n    }\n\n    componentDidMount()\n    {\n        this.setText()\n    }\n\n    render() {\n        const textDisplay = this.state.textDisplay\n        const barClass = this.state.barClass\n        const input = this.state.input\n        const results = this.state.results\n\n        return (\n            <div id=\"command-center\">\n                <div className='bar'>\n                    <div id=\"left-wing\">\n                        <span id=\"word-count\" style={{display: 'inline'}}>\n                            <span id=\"wc-10\" style={{cursor: 'pointer'}} onClick={() => this.setWordCount(10)}>10</span>\n                            <span> / </span>\n                            <span id=\"wc-25\" style={{cursor: 'pointer'}} onClick={() => this.setWordCount(25)}>25</span>\n                            <span> / </span>\n                            <span id=\"wc-50\" style={{cursor: 'pointer'}} onClick={() => this.setWordCount(50)}>50</span>\n                            <span> / </span>\n                            <span id=\"wc-100\" style={{cursor: 'pointer'}} onClick={() => this.setWordCount(100)}>100</span>\n                        </span>\n                    </div>\n                    <div id=\"right-wing\">{results}</div>\n                </div>\n                <div id=\"typing-area\">\n                    <div id=\"text-display\" style={{display: 'block', height: 'auto', direction: 'ltr'}}>\n                        {textDisplay}\n                    </div>\n                    <div className=\"bar\">\n                        <input \n                            id=\"input-field\" \n                            value={input}\n                            onChange={this.handleChange} \n                            type=\"text\" \n                            spellCheck=\"false\" \n                            autoComplete=\"off\" \n                            autoCorrect=\"off\" \n                            autoCapitalize=\"off\" \n                            tabIndex=\"1\" \n                            className={barClass} \n                            style={{direction: 'ltr'}} />\n                        <button id=\"redo-button\" onClick={this.setText} tabIndex=\"2\">redo</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n/*\nconst textDisplayStyle = {\n    display: 'block',\n    height: 'auto',\n    direction: 'ltr'\n}\n*/\n\nexport default TextTyper","/mnt/c/Users/min48/React Projects/idk-react/src/index.js",["38","39"],"import React, {Component} from 'react'\r\nimport ReactDOM from 'react-dom'\r\n//import './index.css'\r\nimport './style.css'\r\n//import App from './App'\r\nimport TextTyper from './TextTyper'\r\nimport CodeTyper from './CodeTyper'\r\n\r\nReactDOM.render(<CodeTyper />, document.getElementById('root'))",{"ruleId":"40","severity":1,"message":"41","line":37,"column":9,"nodeType":"42","endLine":37,"endColumn":19},{"ruleId":"40","severity":1,"message":"41","line":38,"column":9,"nodeType":"42","endLine":38,"endColumn":19},{"ruleId":"40","severity":1,"message":"41","line":39,"column":9,"nodeType":"42","endLine":39,"endColumn":19},{"ruleId":"40","severity":1,"message":"41","line":40,"column":9,"nodeType":"42","endLine":40,"endColumn":19},{"ruleId":"40","severity":1,"message":"41","line":41,"column":9,"nodeType":"42","endLine":41,"endColumn":19},{"ruleId":"40","severity":1,"message":"41","line":42,"column":9,"nodeType":"42","endLine":42,"endColumn":19},{"ruleId":"40","severity":1,"message":"41","line":43,"column":9,"nodeType":"42","endLine":43,"endColumn":19},{"ruleId":"40","severity":1,"message":"41","line":48,"column":9,"nodeType":"42","endLine":48,"endColumn":19},{"ruleId":"40","severity":1,"message":"41","line":61,"column":13,"nodeType":"42","endLine":61,"endColumn":23},{"ruleId":"40","severity":1,"message":"41","line":63,"column":13,"nodeType":"42","endLine":63,"endColumn":23},{"ruleId":"40","severity":1,"message":"41","line":77,"column":21,"nodeType":"42","endLine":77,"endColumn":31},{"ruleId":"40","severity":1,"message":"41","line":93,"column":17,"nodeType":"42","endLine":93,"endColumn":27},{"ruleId":"40","severity":1,"message":"41","line":103,"column":17,"nodeType":"42","endLine":103,"endColumn":27},{"ruleId":"40","severity":1,"message":"41","line":135,"column":17,"nodeType":"42","endLine":135,"endColumn":27},{"ruleId":"43","severity":1,"message":"44","line":231,"column":7,"nodeType":"45","messageId":"46","endLine":231,"endColumn":38},{"ruleId":"40","severity":1,"message":"41","line":20,"column":9,"nodeType":"42","endLine":20,"endColumn":19},{"ruleId":"40","severity":1,"message":"41","line":21,"column":9,"nodeType":"42","endLine":21,"endColumn":19},{"ruleId":"40","severity":1,"message":"41","line":22,"column":9,"nodeType":"42","endLine":22,"endColumn":19},{"ruleId":"40","severity":1,"message":"41","line":59,"column":13,"nodeType":"42","endLine":59,"endColumn":23},{"ruleId":"40","severity":1,"message":"41","line":91,"column":21,"nodeType":"42","endLine":91,"endColumn":31},{"ruleId":"40","severity":1,"message":"41","line":106,"column":21,"nodeType":"42","endLine":106,"endColumn":31},{"ruleId":"40","severity":1,"message":"41","line":149,"column":9,"nodeType":"42","endLine":149,"endColumn":19},{"ruleId":"43","severity":1,"message":"47","line":1,"column":16,"nodeType":"45","messageId":"46","endLine":1,"endColumn":25},{"ruleId":"43","severity":1,"message":"48","line":6,"column":8,"nodeType":"45","messageId":"46","endLine":6,"endColumn":17},"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unused-vars","'highlightTextAreaContainerStyle' is assigned a value but never used.","Identifier","unusedVar","'Component' is defined but never used.","'TextTyper' is defined but never used."]